# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_windows:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Cache MS Speech SDK
        id: cache-speech-sdk
        uses: actions/cache@v1
        with:
          path: "C:\\Program Files\\PackageManagement\\NuGet\\Packages\\Microsoft.CognitiveServices.Speech.1.22.0"
          key: ${{ runner.os }}-MS-Speech-SDK-Cache
      
      - name: Install MS Speech SDK
        run: Install-Package Microsoft.CognitiveServices.Speech -RequiredVersion 1.22.0 -Force
        shell: pwsh
      
      - name: Debug MS Speech SDK Install
        run: (Get-Item((Get-Package -Name Microsoft.CognitiveServices.Speech).Source))
        shell: pwsh

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1  # not v2!
        with:
          path: "${{ github.workspace }}/Qt"
          key: ${{ runner.os }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.15.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          dir: '${{ github.workspace }}/Qt/'
          install-deps: 'true'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Debug print contents
        run: ls $Qt5_Dir
        shell: bash

      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1.0.1
        
      - name: Mount bazel cache  # Optional
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: bazel

      # Runs a set of commands using the runners shell
      - name: Bazel build all targets
        run: bazel build --config=vs2019 ...
        shell: bash
      
      - name: Bazel test all targets
        run: bazel test --config=vs2019 --test_output=errors ...
        shell: bash

  build_ubuntu:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest

      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v2

        - name: apt-get update
          run: sudo apt-get update
          shell: bash

        - name: Install QT 5
          # Ubuntu 22 does not have qt5-default. 
          # So have to manually install the deps
          run: sudo apt-get install -y qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools
          shell: bash
        
        - name: Install QT Dev Tools
          run: sudo apt-get install -y qtmultimedia5-dev qttools5-dev-tools
          shell: bash

        - name: Install Video Acceleration drivers
          run: sudo apt-get install -y libva-dev
          shell: bash
        
        - name: Install libsodium-dev
          run: sudo apt-get install -y libsodium-dev
          shell: bash

        - name: Setup Bazelisk
          uses: bazelbuild/setup-bazelisk@v1.0.1
          
        - name: Mount bazel cache  # Optional
          uses: actions/cache@v2
          with:
            path: "~/.cache/bazel"
            key: bazel

        # Runs a set of commands using the runners shell
        - name: Bazel build all targets
          run: bazel build --config=gcc-asan ...
          shell: bash
        
        - name: Bazel test all targets
          run: bazel test --config=gcc-asan --test_output=errors ...
          shell: bash
